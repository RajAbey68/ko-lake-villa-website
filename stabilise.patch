*** Begin Patch
*** Update File: tsconfig.json
@@
 {
   "compilerOptions": {
+    "baseUrl": ".",
+    "paths": { "@/*": ["./*"] },
+    "jsx": "react-jsx",
+    "skipLibCheck": true
   }
 }
*** End Patch
*** Begin Patch
*** Update File: package.json
@@
   "scripts": {
     "dev": "next dev",
     "build": "next build",
     "start": "next start",
     "lint": "next lint",
     "typecheck": "tsc --noEmit"
   },
+  "engines": { "node": ">=22 <23" },
+  "devDependencies": {
+    "@types/hast": "^3.0.4",
+    "@types/unist": "^3.0.3"
+  }
 }
*** End Patch
*** Begin Patch
*** Update File: next.config.mjs
@@
   images: {
     remotePatterns: [
       { protocol: 'https', hostname: '**.firebasestorage.googleapis.com' },
       { protocol: 'https', hostname: 'images.unsplash.com' }
     ]
   },
   async headers() {
-    const securityHeaders = [
+    const csp = [
+      "default-src 'self'",
+      "script-src 'self' 'unsafe-inline' 'unsafe-eval' https: blob:",
+      "style-src 'self' 'unsafe-inline' https:",
+      "img-src 'self' data: blob: https:",
+      "font-src 'self' data: https:",
+      "connect-src 'self' https: blob:",
+      "frame-ancestors 'self'",
+      "base-uri 'self'"
+    ].join('; ');
+    const securityHeaders = [
       { key: 'X-DNS-Prefetch-Control', value: 'on' },
       { key: 'X-Content-Type-Options', value: 'nosniff' },
       { key: 'Referrer-Policy', value: 'strict-origin-when-cross-origin' },
       { key: 'X-Frame-Options', value: 'SAMEORIGIN' },
       { key: 'Permissions-Policy', value: 'camera=(), microphone=(), geolocation=(self)' },
       { key: 'Strict-Transport-Security', value: 'max-age=63072000; includeSubDomains; preload' },
-      { key: 'Content-Security-Policy', value: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: blob: https:; font-src 'self' data: https:; connect-src 'self' https: blob:; frame-ancestors 'self'; base-uri 'self'" }
+      { key: 'Content-Security-Policy', value: csp }
     ];
     return [{ source: '/(.*)', headers: securityHeaders }];
   }
*** End Patch
*** Begin Patch
*** Update File: tailwind.config.js
@@
-module.exports = {
-  content: [
-    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
-    "./components/**/*.{js,ts,jsx,tsx,mdx}",
-    "./app/**/*.{js,ts,jsx,tsx,mdx}",
-  ],
-}
+module.exports = {
+  content: [
+    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
+    "./components/**/*.{js,ts,jsx,tsx,mdx}",
+    "./app/**/*.{js,ts,jsx,tsx,mdx}",
+    "./ui/**/*.{js,ts,jsx,tsx,mdx}",
+    "./lib/**/*.{js,ts,jsx,tsx,mdx}",
+  ],
+  safelist: [
+    { pattern: /(bg|text|border)-(slate|gray|neutral|stone|zinc|red|orange|amber|yellow|lime|green|emerald|teal|cyan|sky|blue|indigo|violet|purple|fuchsia|pink|rose)-(50|100|200|300|400|500|600|700|800|900)/ },
+    { pattern: /grid-cols-(1|2|3|4|5|6|12)/ },
+    { pattern: /col-span-(1|2|3|4|5|6|12)/ },
+    { pattern: /row-span-(1|2|3|4|5|6|12)/ },
+    { pattern: /aspect-(square|video|[0-9/]+)/ },
+    { pattern: /(h|w)-(screen|min|max|fit|[0-9]{1,3})/ },
+    { pattern: /flex-(row|col|wrap|nowrap|initial|1|auto)/ },
+    { pattern: /order-(first|last|none|[0-9]+)/ },
+    { pattern: /(top|bottom|left|right)-[0-9]+/ },
+    { pattern: /z-([0-9]+|auto)/ },
+    { pattern: /(p|px|py|pt|pr|pb|pl|m|mx|my|mt|mr|mb|ml)-[0-9]+/ },
+  ],
+}
*** End Patch
*** Begin Patch
*** Add File: components/ui/button.tsx
+import * as React from 'react';
+type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & { variant?: 'default'|'outline'|'ghost' };
+export function Button({ className='', variant='default', ...props }: Props) {
+  const base = 'inline-flex items-center justify-center rounded-lg px-4 py-2 text-sm font-medium transition';
+  const styles: Record<string,string> = {
+    default: 'bg-black text-white hover:opacity-90',
+    outline: 'border border-gray-300 text-gray-900 hover:bg-gray-50',
+    ghost: 'text-gray-900 hover:bg-gray-100'
+  };
+  return <button className={`${base} ${styles[variant]} ${className}`} {...props} />;
+}
+export default Button;
*** End Patch
*** Begin Patch
*** Add File: components/ui/card.tsx
+import * as React from 'react';
+export function Card({ className='', ...props }: React.HTMLAttributes<HTMLDivElement>) {
+  return <div className={`rounded-2xl border border-gray-200 bg-white shadow-sm ${className}`} {...props} />;
+}
+export function CardHeader({ className='', ...props }: React.HTMLAttributes<HTMLDivElement>) {
+  return <div className={`p-4 border-b border-gray-100 ${className}`} {...props} />;
+}
+export function CardContent({ className='', ...props }: React.HTMLAttributes<HTMLDivElement>) {
+  return <div className={`p-4 ${className}`} {...props} />;
+}
+export function CardFooter({ className='', ...props }: React.HTMLAttributes<HTMLDivElement>) {
+  return <div className={`p-4 border-t border-gray-100 ${className}`} {...props} />;
+}
+export default Card;
*** End Patch
*** Begin Patch
*** Add File: components/ui/badge.tsx
+import * as React from 'react';
+type Props = React.HTMLAttributes<HTMLSpanElement> & { variant?: 'default'|'secondary'|'outline' };
+export function Badge({ className='', variant='default', ...props }: Props) {
+  const base = 'inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium';
+  const styles: Record<string,string> = {
+    default: 'bg-gray-900 text-white',
+    secondary: 'bg-gray-100 text-gray-900',
+    outline: 'border border-gray-300 text-gray-900'
+  };
+  return <span className={`${base} ${styles[variant]} ${className}`} {...props} />;
+}
+export default Badge;
*** End Patch
*** Begin Patch
*** Add File: components/ui/input.tsx
+import * as React from 'react';
+type Props = React.InputHTMLAttributes<HTMLInputElement>;
+export const Input = React.forwardRef<HTMLInputElement, Props>(function Input({ className='', ...props }, ref) {
+  return (
+    <input
+      ref={ref}
+      className={`w-full rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-gray-300 ${className}`}
+      {...props}
+    />
+  );
+});
+export default Input;
*** End Patch
*** Begin Patch
*** Add File: components/ui/table.tsx
+import * as React from 'react';
+export function Table(props: React.TableHTMLAttributes<HTMLTableElement>) {
+  return <table className="w-full text-sm" {...props} />;
+}
+export function Thead(props: React.HTMLAttributes<HTMLTableSectionElement>) {
+  return <thead className="bg-gray-50" {...props} />;
+}
+export function Tbody(props: React.HTMLAttributes<HTMLTableSectionElement>) {
+  return <tbody className="divide-y divide-gray-100" {...props} />;
+}
+export function Tr(props: React.HTMLAttributes<HTMLTableRowElement>) {
+  return <tr {...props} />;
+}
+export function Th(props: React.ThHTMLAttributes<HTMLTableCellElement>) {
+  return <th className="px-3 py-2 text-left font-semibold text-gray-700" {...props} />;
+}
+export function Td(props: React.TdHTMLAttributes<HTMLTableCellElement>) {
+  return <td className="px-3 py-2" {...props} />;
+}
+export default Table;
*** End Patch
*** Begin Patch
*** Add File: components/ui/dialog.tsx
+import * as React from 'react';
+type DialogProps = { open: boolean; onClose: () => void; title?: string; children?: React.ReactNode };
+export function Dialog({ open, onClose, title, children }: DialogProps) {
+  if (!open) return null;
+  return (
+    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50" onClick={onClose}>
+      <div className="w-full max-w-lg rounded-2xl bg-white p-4 shadow-xl" onClick={(e)=>e.stopPropagation()}>
+        {title && <h3 className="mb-2 text-lg font-semibold">{title}</h3>}
+        <div>{children}</div>
+      </div>
+    </div>
+  );
+}
+export default Dialog;
*** End Patch
