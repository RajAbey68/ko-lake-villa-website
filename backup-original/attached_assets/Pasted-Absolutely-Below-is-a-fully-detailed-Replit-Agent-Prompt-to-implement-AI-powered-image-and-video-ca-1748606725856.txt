Absolutely! Below is a fully detailed Replit Agent Prompt to implement AI-powered image and video categorization using OpenAI ‚Äî designed for your villa property management use case.

This prompt will direct the Replit Agent to:
	‚Ä¢	Accept bulk image/video uploads
	‚Ä¢	Use OpenAI (GPT-4-Vision) to:
	‚Ä¢	Analyze each media file
	‚Ä¢	Suggest category, title, and SEO-friendly description
	‚Ä¢	Store metadata for easy editing
	‚Ä¢	Build a minimalist UI dashboard to view and manage the results

‚∏ª

üß† Replit Agent Prompt ‚Äî OpenAI Image/Video Metadata Assistant

Prompt for Replit Agent

Build a media intelligence feature into my villa website app (Replit-based) that does the following:

üîç AI-Powered Media Metadata Generator

Purpose:

Automatically categorize and describe uploaded photos and videos of my boutique property using OpenAI‚Äôs GPT-4-Vision API.

üéØ Key Features to Build:
	1.	Media Upload Support
	‚Ä¢	Allow bulk upload of .jpg, .png, .mp4 files via a simple drag-and-drop UI
	‚Ä¢	Store files locally (/uploads) or in memory for demo purposes
	2.	OpenAI Integration
	‚Ä¢	Use gpt-4-vision-preview model to:
	‚Ä¢	Analyze images
	‚Ä¢	Suggest:
	‚Ä¢	A category (e.g., ‚ÄúPool Deck‚Äù, ‚ÄúFamily Suite‚Äù, ‚ÄúHostel Room‚Äù)
	‚Ä¢	A short title
	‚Ä¢	An SEO-optimized description
	‚Ä¢	Tags
	‚Ä¢	Return output as structured JSON
	‚Ä¢	Use OpenAI API key stored in OPENAI_API_KEY (from Replit secrets)
	3.	Video File Support
	‚Ä¢	For .mp4 files, extract thumbnail images or keyframes
	‚Ä¢	Send these keyframes to GPT-4-Vision
	‚Ä¢	Generate titles/descriptions based on detected content
	‚Ä¢	Include basic video metadata (duration, size)
	4.	Gallery Management Dashboard
	‚Ä¢	Display thumbnails with editable fields for:
	‚Ä¢	Title
	‚Ä¢	Description
	‚Ä¢	Category
	‚Ä¢	Allow admin to approve or override the AI-generated metadata
	‚Ä¢	Save metadata to a JSON database or in-memory object

üß™ Include Test Suite:

Write functional and logic test cases for:
	‚Ä¢	Image categorization accuracy
	‚Ä¢	Duplicate detection
	‚Ä¢	Video frame extraction
	‚Ä¢	Metadata generation format and completeness

üõ†Ô∏è Stack & Config:
	‚Ä¢	Frontend: Vanilla JS, HTML, drag-and-drop file area
	‚Ä¢	Backend: Node.js + Express
	‚Ä¢	AI Integration: openai SDK
	‚Ä¢	Storage: Local file system or in-memory for metadata

üîê Environment Variables:
	‚Ä¢	OPENAI_API_KEY ‚Üí Use this for all AI tasks

üìÑ Output Examples:

For each uploaded image, return:

{
  "filename": "pool_deck.jpg",
  "category": "Pool Deck",
  "title": "Luxury Infinity Pool View",
  "description": "Enjoy the serene lake views from our infinity pool, perfect for sunny afternoons.",
  "tags": ["pool", "lakefront", "sunset", "outdoor"],
  "editable": true
}

For .mp4 files, include:

{
  "filename": "villa_walkthrough.mp4",
  "duration": "02:15",
  "thumbnail": "/uploads/villa_walkthrough_thumb.jpg",
  "title": "Ko Lake Villa Walkthrough",
  "description": "Take a guided video tour of the luxury rooms, lake deck, and garden suites.",
  "tags": ["video", "villa", "lake", "tour"],
  "editable": true
}



‚∏ª

‚úÖ Secrets Configuration (Replit)

Store this in your Replit Secrets Manager:

OPENAI_API_KEY=your_openai_key_here


‚∏ª

Would you like me to now:
	‚Ä¢	Generate example server.js, index.html, and frontend.js files?
	‚Ä¢	Add specific metadata fields like pricing, room size, etc.?
	‚Ä¢	Include export-to-CSV or search/filter tools for gallery management?

Just let me know how you‚Äôd like to expand this next!