"""
Test Objective:
Verify which gallery UI features are working as expected in the Ko Lake Villa admin module.

Target Features to Test:
1. ‚úÖ Single Image Upload
2. ‚úÖ Single Video Upload
3. ‚úÖ Categorisation, Description, and Tagging
4. ‚úÖ Bulk Image Upload
5. ‚úÖ Bulk Video Upload
6. ‚úÖ AI Analysis of Media (Image/Video) for Auto Description + Tags
"""

from playwright.sync_api import sync_playwright

def run_gallery_ui_tests():
    report = []

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()
        page.goto("https://skill-bridge-rajabey68.replit.app/admin/gallery")

        # 1. Single Image Upload
        try:
            page.click("text=Upload Image")
            page.set_input_files("input[type='file']", "test-assets/test-image.jpg")
            page.fill("textarea[name='description']", "Test Image Description")
            page.select_option("select[name='category']", "family-suite")
            page.click("button:has-text('Upload')")
            page.wait_for_selector("text=Upload Successful", timeout=3000)
            report.append("‚úÖ Image upload passed")
        except Exception:
            report.append("‚ùå Image upload failed")

        # 2. Single Video Upload
        try:
            page.click("text=Upload Video")
            page.set_input_files("input[type='file']", "test-assets/test-video.mp4")
            page.fill("textarea[name='description']", "Test Video Description")
            page.select_option("select[name='category']", "pool-deck")
            page.click("button:has-text('Upload')")
            page.wait_for_selector("text=Upload Successful", timeout=3000)
            report.append("‚úÖ Video upload passed")
        except Exception:
            report.append("‚ùå Video upload failed")

        # 3. Categorisation & Tagging
        try:
            category = page.query_selector("select[name='category']").input_value()
            description = page.query_selector("textarea[name='description']").input_value()
            tags = page.query_selector("input[name='tags']").input_value()
            if category and description and category in tags:
                report.append("‚úÖ Categorisation + tagging logic passed")
            else:
                report.append("‚ùå Categorisation or tags inconsistent")
        except Exception:
            report.append("‚ùå Categorisation/tagging test failed")

        # 4. Bulk Image Upload
        try:
            page.click("text=Bulk Upload")
            page.set_input_files("input[type='file']", ["test-assets/test-image1.jpg", "test-assets/test-image2.jpg"])
            page.click("button:has-text('Upload')")
            page.wait_for_selector("text=Bulk Upload Successful", timeout=4000)
            report.append("‚úÖ Bulk image upload passed")
        except Exception:
            report.append("‚ùå Bulk image upload failed")

        # 5. Bulk Video Upload
        try:
            page.click("text=Bulk Upload")
            page.set_input_files("input[type='file']", ["test-assets/test-video1.mp4", "test-assets/test-video2.mp4"])
            page.click("button:has-text('Upload')")
            page.wait_for_selector("text=Bulk Upload Successful", timeout=4000)
            report.append("‚úÖ Bulk video upload passed")
        except Exception:
            report.append("‚ùå Bulk video upload failed")

        # 6. AI Analysis on Upload
        try:
            page.set_input_files("input[type='file']", "test-assets/ai-image.jpg")
            page.click("button:has-text('Analyze')")
            page.wait_for_selector("text=AI Analysis Complete", timeout=4000)
            ai_result = page.query_selector("text=Suggested Tags").inner_text()
            if ai_result:
                report.append("‚úÖ AI analysis returned tags")
            else:
                report.append("‚ùå AI analysis returned empty result")
        except Exception:
            report.append("‚ùå AI analysis failed")

        browser.close()

    # Print Report
    print("üìã Gallery UI Test Report:")
    for line in report:
        print("-", line)

run_gallery_ui_tests()